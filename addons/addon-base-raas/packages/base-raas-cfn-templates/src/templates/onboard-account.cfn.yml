AWSTemplateFormatVersion: 2010-09-09

Description: Service-Workbench-on-AWS Research-Account

Parameters:
  Namespace:
    Type: String
    Description: An environment name that will be prefixed to resource names

  CentralAccountId:
    Type: String
    Description: The account id of the main AWS account where the solution is deployed.

  ExternalId:
    Type: String
    Description: A unique ID used to identify this account

  VpcCidr:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  ApiHandlerArn:
    Type: String
    Description: The arn of apiHandler role

  WorkflowRoleArn:
    Type: String
    Description: The arn of workflowRunner role

  # Generous subnet allocation of 8192 addresses (ie room for a few concurrent EMR clusters)
  # ending at 10.0.31.255
  VpcPublicSubnet1Cidr:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the 1st Availability Zone
    Type: String
    Default: 10.0.0.0/19

  LaunchConstraintRolePrefix:
    Description: Role name prefix to use when creating a launch constraint role in the on-boarded account
    Type: String
    Default: '*'

  LaunchConstraintPolicyPrefix:
    Description: Customer managed policy name prefix to use when creating a launch constraint role in the on-boarded account
    Type: String
    Default: '*'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Shared Configuration
        Parameters:
          - Namespace
      - Label:
          default: Account Configuration
        Parameters:
          - CentralAccountId
          - ExternalId
      - Label:
          default: Deployment Configuration
        Parameters:
          - VpcCidr
          - VpcPublicSubnet1Cidr

Resources:
  # A role used for launching environments using AWS Service Catalog
  # This is the role that code (ApiHandlerLambda and WorkflowLoopRunnerLambda) in central account
  # assumes before performing any AWS Service Catalog interactions in this account (the on-boarded account)
  # for launching environments.
  # Equivalent role for central account is created by 'main/solution/backend/config/infra/cloudformation.yml'
  CrossAccountRoleEnvMgmt:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'xacc-env-mgmt']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - !Join [':', ['arn:aws:iam:', Ref: CentralAccountId, 'root']]
                - !Ref ApiHandlerArn
                - !Ref WorkflowRoleArn
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !Ref ExternalId
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSServiceCatalogAdminFullAccess
      Policies:
        - PolicyName: ec2-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ec2:CreateKeyPair
                - ec2:DeleteKeyPair
                - ec2:GetPasswordData
                - ec2:ModifyImageAttribute
                - ec2:DescribeImages
                - ec2:DescribeInstances
                - ec2:DescribeSecurityGroups
                - ec2:RevokeSecurityGroupIngress
                - ec2:AuthorizeSecurityGroupIngress
                - ec2-instance-connect:SendSSHPublicKey
              Resource: '*'
        - PolicyName: cfn-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:GetTemplate
                Resource: 'arn:aws:cloudformation:*:*:stack/SC-*/*'
        - PolicyName: ssm-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ssm:PutParameter
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:DeleteParameter
              Resource:
                - !Sub 'arn:aws:ssm:*:${AWS::AccountId}:parameter/*/sc-environments/*'
        - PolicyName: s3-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - 'arn:aws:s3:::cf-templates-*/*'
        - PolicyName: sagemaker-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - sagemaker:CreatePresignedNotebookInstanceUrl
                - sagemaker:ListNotebookInstances
              Resource: '*'
        - PolicyName: iam-role-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:TagRole
                  - iam:GetRolePolicy
                  - iam:PutRolePolicy
                  - iam:DeleteRolePolicy
                  - iam:ListRolePolicies
                  - iam:ListAttachedRolePolicies
                  - iam:UpdateAssumeRolePolicy
                  - iam:UpdateRoleDescription
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                Resource:
                  - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${LaunchConstraintRolePrefix}LaunchConstraint'
      PermissionsBoundary: !Ref CrossAccountEnvMgmtPermissionsBoundary

  CrossAccountEnvMgmtPermissionsBoundary:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Permission boundary for cross account EnvMgmt role
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - s3:*
              - cloudformation:*
              - sagemaker:*
              - ec2:*
              - ssm:*
              - config:*
              - servicecatalog:*
              - ec2-instance-connect:*
            Resource: '*'
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: '*'
            Condition:
              StringEquals:
                iam:PassedToService: 'servicecatalog.amazonaws.com'
          - Effect: Allow
            Action:
              - iam:CreateRole
              - iam:TagRole
              - iam:GetRolePolicy
              - iam:PutRolePolicy
              - iam:DeleteRolePolicy
              - iam:ListRolePolicies
              - iam:ListAttachedRolePolicies
              - iam:UpdateAssumeRolePolicy
              - iam:UpdateRoleDescription
              - iam:AttachRolePolicy
              - iam:DetachRolePolicy
            Resource:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${LaunchConstraintRolePrefix}'
          - Effect: Allow
            Action:
              - iam:CreatePolicy
              - iam:GetPolicy
              - iam:GetPolicyVersion
              - iam:ListPolicyVersions
              - iam:DeletePolicy
              - iam:DeletePolicyVersion
            Resource:
              - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${LaunchConstraintPolicyPrefix}'
          - Effect: Allow
            Action:
              - iam:GetGroup
              - iam:GetRole
              - iam:GetUser
              - iam:ListGroups
              - iam:ListRoles
              - iam:ListUsers
            Resource: '*' # These non-mutating IAM actions cover the permissions in managed policy AWSServiceCatalogAdminFullAccess

  PolicyCrossAccountExecution:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allows main account to perform critical analytics on workspaces provisioned in member accounts
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:DescribeStackEvents
            Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/SC-*'
          - Effect: Allow
            Action:
              - sagemaker:CreatePresignedNotebookInstanceUrl
              - sagemaker:StartNotebookInstance
              - sagemaker:StopNotebookInstance
              - sagemaker:DescribeNotebookInstance
            Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:notebook-instance/basicnotebookinstance-*'
          - Effect: Allow
            Action:
              - sagemaker:ListNotebookInstances
            Resource: '*' # For the actions listed above IAM does not support resource-level permissions and requires all resources to be chosen
          - Effect: Allow
            Action:
              - iam:GetRole
              - iam:TagRole
              - iam:GetRolePolicy
              - iam:DeleteRolePolicy
              - iam:DeleteRole
              - iam:PassRole
              - iam:PutRolePolicy
            Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/analysis-*'
          - Effect: Allow
            Action:
              - ce:GetCostAndUsage
            Resource: '*' # For the actions listed above IAM does not support resource-level permissions and requires all resources to be chosen
          - Effect: Allow
            Action:
              - budgets:ViewBudget
              - budgets:ModifyBudget
            Resource: !Sub 'arn:aws:budgets::${AWS::AccountId}:budget/service-workbench-system-generated*'
          - Effect: Allow
            Action:
              - ec2:StartInstances
              - ec2:StopInstances
            Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
          - Effect: Allow
            Action:
              - ec2:DescribeInstanceStatus
              - ec2:DescribeInstances
            Resource: '*' # For the actions listed above IAM does not support resource-level permissions and requires all resources to be chosen
          - Effect: Allow
            Action:
              - ec2:DescribeSubnets
              - ec2:DescribeVpcs
              - ec2:DescribeNetworkInterfaces
            Resource: '*' # For the actions listed above IAM does not support resource-level permissions and requires all resources to be chosen
          - Effect: Allow
            Action:
              - ssm:GetParameter
            Resource:
              - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/*'

  CrossAccountExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ['-', [Ref: Namespace, 'cross-account-role']]
      Path: '/'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS:
                - !Join [':', ['arn:aws:iam:', Ref: CentralAccountId, 'root']]
                - !Ref ApiHandlerArn
                - !Ref WorkflowRoleArn
            Action:
              - 'sts:AssumeRole'
            Condition:
              StringEquals:
                sts:ExternalId: !Ref ExternalId
      ManagedPolicyArns:
        - !Ref PolicyCrossAccountExecution
      PermissionsBoundary: !Ref PolicyCrossAccountExecution

  # VPC for launching EMR clusters into
  # Just one AZ as we're aiming for transient low-cost clusters rather than HA
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} igw

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ]
      CidrBlock: !Ref VpcPublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} public subnet 1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${Namespace} public routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  EncryptionKey:
    Type: AWS::KMS::Key
    Properties:
      Description: 'This is the key used to secure resources in this account'
      EnableKeyRotation: True
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Allow root access
            Effect: 'Allow'
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - 'kms:*'
            Resource: '*'
          - Sid: Allow use of the key by this account
            Effect: 'Allow'
            Principal:
              AWS: '*'
            Action:
              - 'kms:DescribeKey'
              - 'kms:Encrypt'
              - 'kms:Decrypt'
              - 'kms:ReEncrypt*'
              - 'kms:GenerateDataKey'
              - 'kms:GenerateDataKeyWithoutPlaintext'
              - 'kms:CreateGrant'
              - 'kms:RevokeGrant'
            Resource: '*'
            Condition:
              StringEquals:
                kms:CallerAccount: !Ref 'AWS::AccountId'

  EncryptionKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Join ['', ['alias/', Ref: Namespace, '-encryption-key']]
      TargetKeyId: !Ref EncryptionKey

Outputs:
  CrossAccountEnvMgmtRoleArn:
    Description: The arn of the cross account role for environment management using AWS Service Catalog
    Value: !GetAtt [CrossAccountRoleEnvMgmt, Arn]

  CrossAccountExecutionRoleArn:
    Description: The arn of the cross account role.
    Value: !GetAtt [CrossAccountExecutionRole, Arn]

  VPC:
    Description: VPC ID
    Value: !Ref VPC

  VpcPublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet1

  EncryptionKeyArn:
    Description: KMS Encryption Key Arn
    Value: !GetAtt [EncryptionKey, Arn]
