#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  SPDX-License-Identifier: Apache-2.0
#

name: Deploy & Integration Test
on:
  push:
    branches:
      - develop
jobs:
  pre-deployment-check:
    name: Pre deployment check
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - name: "Block Concurrent Deployments"
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    name: Deploy to Dev
    runs-on: ubuntu-20.04
    needs: pre-deployment-check
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - uses: actions/setup-go@v2
        with:
          go-version: 1.13
      - name: Install pnpm
        run: npm install -g pnpm@5.18.9
      - name: Install dependencies
        run: ./scripts/install.sh
      - name: Build all packages
        run: ./scripts/build-all-packages.sh
      - name: Deploy
        env:
          STAGE_NAME: e2etest
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_CERTIFICATE_ARN: ${{ secrets.AWS_CERTIFICATE_ARN }}
          AWS_DOMAIN_NAME: ${{ secrets.AWS_DOMAIN_NAME }}
          AWS_HOSTED_ZONE_ID: ${{ secrets.AWS_HOSTED_ZONE_ID }}
        run: |
          cp ./main/end-to-end-tests/e2eGitHubConfig.yml ./main/config/settings/${STAGE_NAME}.yml
          ./scripts/read-values-for-github-action.sh
          ./scripts/environment-deploy.sh ${STAGE_NAME}
  integration-test:
    name: Integration test
    runs-on: ubuntu-20.04
    needs: deploy
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install pnpm and system libraries
        run: |
          npm install -g pnpm@5.18.9
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - name: Install dependencies
        run: pnpm install
        working-directory: main/integration-tests
      - name: Run integration tests
        run: ./scripts/run-integration-tests.sh ${STAGE_NAME} us-east-1
        working-directory: ./
        env:
          DEPLOYMENT_BUCKET: ${{ secrets.DEPLOYMENT_BUCKET}}
          STAGE_NAME: e2etest
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  cypress-test:
    name: Cypress test
    runs-on: ubuntu-20.04
    needs: integration-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Install pnpm and system libraries
        run: |
          npm install -g pnpm@5.18.9
          sudo apt-get install libgtk2.0-0 libgtk-3-0 libgbm-dev libnotify-dev libgconf-2-4 libnss3 libxss1 libasound2 libxtst6 xauth xvfb
      - name: Install dependencies
        run: pnpm install
        working-directory: main/end-to-end-tests
      - name: Run cypress test
        run: pnpm run cypress:run-tests:github
        working-directory: main/end-to-end-tests
        env:
          # Env parameters for cypress tests need header 'CYPRESS_' or 'cypress_'
          # Cypress will strip the header and pass it to the tests
          CYPRESS_BASE_URL: ${{ secrets.CYPRESS_BASE_URL}}
          CYPRESS_researcherEmail: ${{ secrets.CYPRESS_RESEARCHER_EMAIL}}
          CYPRESS_researcherPassword: ${{ secrets.CYPRESS_RESEARCHER_PASSWORD}}
          CYPRESS_adminEmail: ${{ secrets.CYPRESS_ADMIN_EMAIL}}
          CYPRESS_adminPassword: ${{ secrets.CYPRESS_ADMIN_PASSWORD}}
          CYPRESS_guestEmail: ${{ secrets.CYPRESS_GUEST_EMAIL}}
          CYPRESS_guestPassword: ${{ secrets.CYPRESS_GUEST_PASSWORD}}
          CYPRESS_internalGuestEmail: ${{ secrets.CYPRESS_INTERNAL_GUEST_EMAIL}}
          CYPRESS_internalGuestPassword: ${{ secrets.CYPRESS_INTERNAL_GUEST_PASSWORD}}
  check-codepipeline-status:
    name: Check Github Status
    runs-on: ubuntu-20.04
    needs: cypress-test
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - name: Wait until CodePipeline status is shown
        run: |
          npm install
          node checkCommitStatus.js ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} ${{ github.sha }}
        working-directory: scripts/check-commit-status
  merge-develop-to-mainline:
    name: Merge develop to mainline
    runs-on: ubuntu-20.04
    needs: check-codepipeline-status
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{secrets.MERGE_TOKEN}}
          fetch-depth: 0
      # There's no way for github actions to push to a protected branch. This is a workaround
      # See https://github.community/t/how-to-push-to-protected-branches-in-a-github-action/16101/30
      - name: Temporarily disable branch protection
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: service-workbench-on-aws
          branch: mainline
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
      - name: Merge to mainline
        run: |
          git checkout mainline
          echo
          echo "  Attempting to merge the 'develop' branch ($(git log -1 --pretty=%H develop))"
          echo "  into the 'mainline' branch ($(git log -1 --pretty=%H mainline))"
          echo
          git merge --ff-only --no-edit develop
          git push origin mainline
      - name: Enable branch protection
        uses: octokit/request-action@v2.x
        if: always() # Make sure to enable branch protection even if other steps fail
        with:
          route: POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: service-workbench-on-aws
          branch: mainline
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
  check-beta-in-changelog:
    name: Check Beta status
    # Trigger to check and add Beta header if the latest commit isn't a release from standard-version or the last Add Beta
    # workflow run
    if: "!contains(github.event.head_commit.message, 'chore(release):') && !contains(github.event.head_commit.message, 'Add Beta')"
    needs: merge-develop-to-mainline
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.MERGE_TOKEN }}
          fetch-depth: 0
      # There's no way for github actions to push to a protected branch. This is a workaround
      # See https://github.community/t/how-to-push-to-protected-branches-in-a-github-action/16101/30
      - name: Temporarily disable branch protection
        uses: octokit/request-action@v2.x
        with:
          route: DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: service-workbench-on-aws
          branch: develop
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
      - name: Check if Beta is present and add if not
        run: ./scripts/check-and-add-beta.sh
      - name: Enable branch protection
        uses: octokit/request-action@v2.x
        if: always() # Make sure to enable branch protection even if other steps fail
        with:
          route: POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins
          owner: awslabs
          repo: service-workbench-on-aws
          branch: develop
        env:
          GITHUB_TOKEN: ${{ secrets.MERGE_TOKEN }}
