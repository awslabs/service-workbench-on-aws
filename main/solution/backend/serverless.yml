# For full config options, see docs.serverless.com
# Note that most settings in here come from config/settings/*.yaml
service: ${self:custom.settings.awsRegionShortName}-${self:custom.settings.solutionName}-backend

package:
  individually: true
  excludeDevDependencies: true

provider:
  name: aws
  runtime: nodejs12.x
  region: ${self:custom.settings.awsRegion}
  profile: ${self:custom.settings.awsProfile}
  stackName: ${self:custom.settings.envName}-${self:service}
  deploymentBucket:
    name: ${self:custom.settings.deploymentBucketName}
    serverSideEncryption: AES256
  stackTags: ${self:custom.tags}
  versionFunctions: false # see https://medium.com/@mayconbordin/lessons-learned-building-a-large-serverless-project-on-aws-74d40f5b0b46
  # All references beginning with ${self:*, ${opt:*, ${file:*, ${deep:*, and ${cf:* will be resolved by Serverless
  # All other ${* references will be resolved by CloudFormation
  # See https://forum.serverless.com/t/getting-handle-accountid-in-serverless-config/946/11 and
  # See https://github.com/serverless/serverless/issues/5011
  variableSyntax: '\$\{((((self|opt|deep|cf):)|file)((?!\$\{).)+?)}'
  logs:
    restApi:
      format: '{"authorizer.principalId":"$context.authorizer.principalId","error.message":"$context.error.message","extendedRequestId":"$context.extendedRequestId","httpMethod":"$context.httpMethod","identity.sourceIp":"$context.identity.sourceIp","integration.error":"$context.integration.error","integration.integrationStatus":"$context.integration.integrationStatus","integration.latency":"$context.integration.latency","integration.requestId":"$context.integration.requestId","integration.status":"$context.integration.status","path":"$context.path","requestId":"$context.requestId","responseLatency":"$context.responseLatency","responseLength":"$context.responseLength","stage":"$context.stage","status":"$context.status"}'
      executionLogging: false
  tracing:
    apiGateway: true
    lambda: true
  environment:
    APP_ENV_TYPE: ${self:custom.settings.envType}
    APP_ENV_NAME: ${self:custom.settings.envName}
    APP_AWS_REGION: ${self:custom.settings.awsRegion}
    APP_SOLUTION_NAME: ${self:custom.settings.solutionName}
    APP_DB_PREFIX: ${self:custom.settings.dbPrefix}
    APP_MAIN_ACCT: ${self:custom.settings.awsAccountInfo.awsAccountId}

custom:
  settings: ${file(./config/settings/.settings.js):merged}
  tags:
    Name: ${self:custom.settings.envName}-${self:service}
  deploymentBucket:
    policy: ${self:custom.settings.deploymentBucketPolicy}
  serverless-offline:
    port: 4000
  webpack:
    webpackConfig: ./config/build/webpack.config.js
    packager: pnpm
    keepOutputDirectory: true
    excludeFiles: src/**/*.test.js
  backendTools:
    environmentOverrides: # when running locally
      provider:
        APP_AWS_REGION: ${self:custom.settings.awsRegion} # this is needed for local development
        APP_AWS_PROFILE: ${self:custom.settings.awsProfile} # this is needed for local development
        APP_USE_AWS_PROFILE: ${self:custom.settings.useAwsProfile}
        IS_OFFLINE: true
        APP_LOCAL_ROLE_AUTO_ADJUST_TRUST: ${self:custom.settings.localRoleAutoAdjustTrust} # Auto adjust trust policy of the lambda execution role to allow assumeRole from local machine
      lambdas:
        authenticationLayerHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('AuthenticationLayerHandlerRoleArn')} # When running locally, run under this role
        apiHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('ApiHandlerRoleArn')} # When running locally, run under this role
            APP_ENV_MGMT_ROLE_ARN: ${cfnOutput('EnvMgmtRoleArn')}
        workflowLoopRunner:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('WorkflowLoopRunnerRoleArn')} # When running locally, run under this role
            APP_ENV_MGMT_ROLE_ARN: ${cfnOutput('EnvMgmtRoleArn')}
        openDataScrapeHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('OpenDataScrapeHandlerRoleArn')} # When running locally, run under this role
        envStatusPollHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('ApiHandlerRoleArn')} # When running locally, run under this role
        dataSourceReachabilityHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('DataSourceReachabilityHandlerRoleArn')} # When running locally, run under this role
        dataSourceReachabilityDailyHandler:
          environment:
            APP_LOCAL_ROLE_ARN: ${cfnOutput('DataSourceReachabilityHandlerRoleArn')} # Use same role arn as the one above (used for more frequent cron lambda)

  s3Sync:
    - bucketName: ${self:custom.settings.externalCfnTemplatesBucketName} # required
      localDir: ../../../addons/addon-base-raas/packages/base-raas-cfn-templates/src/templates/external

functions: ${file(./config/infra/functions.yml)}

resources:
  - Description: Service-Workbench-on-AWS ${self:custom.settings.version} ${self:custom.settings.solutionName} ${self:custom.settings.envName} Backend
  - ${file(./config/infra/cloudformation.yml)}
  - Resources:
      # Create a permissions boundary for role Serverless creates to manage Cloudwatch access
      # The default role has permission to create any role and attach any policy. Here we are restricting
      # the role to only create a specific role and attach only Cloudwatch publishing managed policy
      ServerlessLogsBoundary:
        Type: AWS::IAM::ManagedPolicy
        Properties:
          Description: Allows serverless to manage CloudWatch publishing
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:GET
                  - apigateway:PATCH
                Resource: 'arn:aws:apigateway:${self:custom.settings.awsRegion}::/account'
              - Effect: Allow
                Action:
                  - iam:CreateRole
                  - iam:AttachRolePolicy
                  - iam:ListAttachedRolePolicies
                  - iam:PassRole
                Resource: 'arn:aws:iam::${self:custom.settings.awsAccountInfo.awsAccountId}:role/serverlessApiGatewayCloudWatchRole'
                Condition:
                  ArnEqualsIfExists:
                    iam:PolicyARN: 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
  - extensions:
      # Add custom permission boundary to role serverless uses for creating Cloudwatch publishing role
      IamRoleCustomResourcesLambdaExecution:
        Properties:
          PermissionsBoundary: !Ref ServerlessLogsBoundary



plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-deployment-bucket
  - serverless-s3-sync
  - '@aws-ee/base-serverless-backend-tools'
