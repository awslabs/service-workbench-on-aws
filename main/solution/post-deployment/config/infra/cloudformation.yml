Resources:
  # =============================================================================================
  # IAM Roles
  # =============================================================================================

  # IAM Role for the postDeployment Function
  RolePostDeploymentLambda:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
      Policies:
        - PolicyName: assume-role
          PolicyDocument:
            Statement:
              Action: 'sts:AssumeRole'
              Effect: Allow
              Resource: !Sub ${self:custom.settings.envMgmtRoleArn}
        - PolicyName: iam-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                # required for associating lambda@edge to cf distro
                # see https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-edge-permissions.html#lambda-edge-permissions-required
                - iam:CreateServiceLinkedRole
                - iam:GetRole
              Resource:
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/replicator.lambda.amazonaws.com/AWSServiceRoleForLambdaReplicator'
                - !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/logger.cloudfront.amazonaws.com/AWSServiceRoleForCloudFrontLogger'
              Condition:
                ForAllValues:StringLike:
                  iam:AWSServiceName:
                    - replicator.lambda.amazonaws.com
                    - logger.cloudfront.amazonaws.com
        - PolicyName: launch-constraint-access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt ServiceCatalogLaunchConstraintRole.Arn
        - PolicyName: s3-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - s3:GetObject
              Resource:
                - arn:aws:s3:::${self:custom.settings.deploymentBucketName}/saml-metadata/*
                - arn:aws:s3:::${self:custom.settings.deploymentBucketName}/service-catalog-products/*
        - PolicyName: db-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - dynamodb:GetItem
                - dynamodb:DeleteItem
                - dynamodb:PutItem
                - dynamodb:UpdateItem
                - dynamodb:Query
                - dynamodb:Scan
              Resource:
                - !GetAtt [DbDeploymentStore, Arn]
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTablePasswords}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableUsers}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableAuthenticationProviderTypes}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableAuthenticationProviderConfigs}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableStepTemplates}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableWorkflowTemplates}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableWorkflows}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableWfAssignments}'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableWfAssignments}/index/*'
                - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${self:custom.settings.dbTableUserRoles}'
        - PolicyName: param-store-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:PutParameter
              Resource: !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${self:custom.settings.paramStoreRoot}/*'
        - PolicyName: kms-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - kms:DescribeKey
                Resource: '*'
        - PolicyName: cfn-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - cloudformation:DescribeStacks
              Resource:
                - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${self:custom.settings.backendStackName}/*
        - PolicyName: cloudfront-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - cloudfront:GetDistributionConfig
                - cloudfront:UpdateDistribution
              Resource:
                - !Sub arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${self:custom.settings.cloudFrontId}
        - PolicyName: lambda-access
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:UpdateFunctionConfiguration
                Resource:
                  - !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:custom.settings.workflowLambdaName}
              - Effect: Allow
                Action:
                  - lambda:GetFunction
                  - lambda:publishVersion
                  - lambda:EnableReplication
                Resource:
                  - ${self:custom.settings.edgeLambdaArn}
                  - ${self:custom.settings.edgeLambdaArn}:* # appending ':*' to allow actions on specific versions of the lambda
        - PolicyName: service-catalog-access
          PolicyDocument:
            Statement:
              Effect: Allow
              Action:
                - servicecatalog:CreatePortfolio
                - servicecatalog:UpdatePortfolio
                - servicecatalog:DescribePortfolio
                - servicecatalog:CreateProduct
                - servicecatalog:UpdateProduct
                - servicecatalog:DescribeProduct
                - servicecatalog:AssociatePrincipalWithPortfolio
                - servicecatalog:AssociateProductWithPortfolio
                - servicecatalog:CreateConstraint
                - servicecatalog:ListPortfolios
                - servicecatalog:CreateProvisioningArtifact
              Resource:
                - !Sub arn:${AWS::Partition}:servicecatalog:${AWS::Region}:${AWS::AccountId}:*
                - !Sub arn:${AWS::Partition}:servicecatalog:${AWS::Region}:${AWS::AccountId}:*/*
                - !Sub arn:${AWS::Partition}:catalog:${AWS::Region}:${AWS::AccountId}:portfolio/*
                - !Sub arn:${AWS::Partition}:catalog:${AWS::Region}:${AWS::AccountId}:product/*

  ServiceCatalogLaunchConstraintRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ${self:custom.settings.launchConstraintRoleName}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - servicecatalog.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        # The deployer role needs permissions to deploy CFN stacks and all actions those stacks are performing
        # The permissions required by stacks are very fluid and dependent on which resources are declared in those
        # stacks
        - arn:aws:iam::aws:policy/PowerUserAccess
      Policies:
        - PolicyName: ServiceCatalogProductLaunchPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - iam:AttachRolePolicy
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:DeleteRolePolicy
                  - iam:DetachRolePolicy
                  - iam:GetRole
                  - iam:GetRolePolicy
                  - iam:PassRole
                  - iam:PutRolePolicy
                  - iam:*TagRole*
                Resource: '*'
                Effect: Allow
        - PolicyName: iam-instance-profile-access
          PolicyDocument:
            Statement:
              Effect: Allow
              - Action:
                  - iam:AddRoleToInstanceProfile
                  - iam:CreateInstanceProfile
                  - iam:GetInstanceProfile
                  - iam:DeleteInstanceProfile
                  - iam:RemoveRoleFromInstanceProfile
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:instance-profile/analysis-*'
  # =============================================================================================
  # Dynamo db
  # =============================================================================================

  DbDeploymentStore:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.settings.dbTableDeploymentStore}
      AttributeDefinitions:
        - AttributeName: 'type'
          AttributeType: 'S'
        - AttributeName: 'id'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'type'
          KeyType: 'HASH'
        - AttributeName: 'id'
          KeyType: 'RANGE'
      BillingMode: PAY_PER_REQUEST

# =============================================================================================
# Outputs
# =============================================================================================
Outputs:
  PostDeploymentRoleArn:
    Value: !GetAtt RolePostDeploymentLambda.Arn
