# Options used when issuing JWT token such as which algorithm to use for hashing and how long to keep the tokens alive etc
jwtOptions: '{"algorithm":"HS256","expiresIn":"2 days"}'

# Name of the parameter in the parameter store to save the generated password of the root user
rootUserPasswordParamName: /${self:custom.settings.paramStoreRoot}/user/root/password

# Name of the parameter in parameter store containing secret key for JWT. This key is used for signing and validating JWT tokens
# issued by data lake authentication providers
paramStoreJwtSecret: '/${self:custom.settings.paramStoreRoot}/jwt/secret'

# The stack name of the 'infrastructure' serverless service
infrastructureStackName: ${self:custom.settings.namespace}-infrastructure

# The URL of the website as defined by the infrastructure stack
# Used when provisioning a Cognito user pool so that Cognito can direct a user back to the site after auth
websiteUrl: ${cf:${self:custom.settings.infrastructureStackName}.WebsiteUrl}

# If a Cognito user pool is setup for the solution, this setting indicates whether native
# Cognito users should be used or if the Cognito user pool will only be used to federate to
# other identity providers
enableNativeUserPoolUsers: false

# Cognito domain prefix. Note random string will be padded at the end if specified domain is not available
cognitoUserPoolDomainPrefix: ${self:custom.settings.envName}-${self:custom.settings.solutionName}

# Title of the default (internal) authentication provider. This shows up in the login dropdown.
defaultAuthNProviderTitle: 'Default Login'

# Title of the Cognito authentication provider that federates with Active Directory identity provider.
cognitoAuthNProviderTitle: 'Login using Active Directory'

# The stack name of the 'backend' serverless service
backendStackName: ${self:custom.settings.namespace}-backend

# The name of the workflowLoopRunner lambda
workflowLambdaName: ${self:custom.settings.awsRegionShortName}-${self:custom.settings.solutionName}-backend-${self:custom.settings.envName}-workflowLoopRunner

# The S3 bucket name to be used to the data
dataBucketName: ${self:custom.settings.namespace}-data

# The stack name of the 'edge-lambda' serverless service
edgeLambdaStackName: ${self:custom.settings.namespace}-edgeLambda
edgeLambdaArn: ${cf:${self:custom.settings.edgeLambdaStackName}.EdgeLambdaArn}
cloudFrontId: ${cf:${self:custom.settings.infrastructureStackName}.CloudFrontId}

# ================================ settings for Cognito with SAML2.0 Federation  ===========================================

# Array of identity provider ids.
# The usual practice is to keep this same as the domain name of the idp.
# For example, when connecting with an IdP that has users "user1@domain1.com", "user2@domain1.com" etc then
# the id should be set to "domain1.com"
#
# If you do not want to connect to Active Directory then leave this setting as empty array as follows.
#
# fedIdpIds: '[]'
#
fedIdpIds: '[]'

# Array of identity provider names. This array should be in same order as the "fedIdpIds"
# Some name for the IdPs. (such as 'com.ee', 'EEAD' etc)
#
# If you do not want to connect to Active Directory then leave this setting as empty array as follows.
#
# fedIdpNames: '[]'
#
fedIdpNames: '[]'

# Array of identity provider display names. This array should be in same order as the "fedIdpIds"
# Display name (such as 'Employee Login', 'AD Login' etc). This is not used in the system.
# This can be used in UI to show login buttons that redirect users to IdP specific login pages.
# Currently, even UI is not using this as it directs the user to Cognito hosted UI login page.
#
# If you do not want to connect to Active Directory then leave this setting as empty array as follows.
#
# fedIdpDisplayNames: '[]'
#
fedIdpDisplayNames: '[]'

# Array of identity provider SAML metadata. This array should be in same order as the "fedIdpIds".
# The array should contain either
# 1. S3 or http(s) url pointing to the IdP metadata.
#  If S3 URL then it must be accessible by the post-deployment lambda
#   (i.e., the lambda must have getObject permission to read the specified metadata file location from S3)
#   The GetObject permission is given by the "RolePostDeploymentLambda" in "post-deployment/config/infra/cloudformation.yml"
#  If it's http(s) URL then it must be reachable over the public internet.
# (TODO: Add support for metadata URLs accessible only in private network.)
# OR
# 2. the metadata content XML blob as string
# The current implementation looks for the file in "solution/post-deployment/config/saml-metadata" directory and
# uploads the file to the S3 directory (prefix) "${self:custom.settings.deploymentBucketName}/saml-metadata/".
# The uploading of the file is done using serverless s3-sync plugin. See "post-deployment/serverless.yml"
# file and search for "s3Sync" to see which files are uploaded to the "${self:custom.settings.deploymentBucketName}" S3
# bucket.
#
# If you do not want to connect to Active Directory then leave this setting as empty array as follows.
#
# fedIdpMetadatas: '[]'
fedIdpMetadatas: '[]'

# ================================ DB Settings ===========================================

# DynamoDB table name for the deployment store
dbDeploymentStore: ${self:custom.settings.dbPrefix}-DeploymentStore

# DynamoDB table name for supported authentication provider types
dbAuthenticationProviderTypes: ${self:custom.settings.dbPrefix}-AuthenticationProviderTypes

# DynamoDB table name for authentication provider configurations
dbAuthenticationProviderConfigs: ${self:custom.settings.dbPrefix}-AuthenticationProviderConfigs

# DynamoDB table name for data lake users
dbUsers: ${self:custom.settings.dbPrefix}-Users

# DynamoDB table name for passwords for the internal data lake users
# (applicable only to the users authenticated by internal authentication provider)
dbPasswords: ${self:custom.settings.dbPrefix}-Passwords

# DynamoDB table name for User's API Keys. These keys are different from the user's passwords.
# These keys allow the user invoke Data Lake APIs directly outside of the UI.
dbUserApiKeys: ${self:custom.settings.dbPrefix}-UserApiKeys

# DynamoDB table name for Token Revocation Table
dbRevokedTokens: ${self:custom.settings.dbPrefix}-RevokedTokens

# DynamoDB table name for Locks
dbLocks: ${self:custom.settings.dbPrefix}-Locks

# DynamoDB table name for Step Templates
dbStepTemplates: ${self:custom.settings.dbPrefix}-StepTemplates

# DynamoDB table name for Workflow Templates
dbWorkflowTemplates: ${self:custom.settings.dbPrefix}-WorkflowTemplates

# DynamoDB table name for Workflow Templates Drafts
dbWorkflowTemplateDrafts: ${self:custom.settings.dbPrefix}-WorkflowTemplateDrafts

# DynamoDB table name for Workflows
dbWorkflows: ${self:custom.settings.dbPrefix}-Workflows

# DynamoDB table name for Workflow Drafts
dbWorkflowDrafts: ${self:custom.settings.dbPrefix}-WorkflowDrafts

# DynamoDB table name for Workflow Instances
dbWorkflowInstances: ${self:custom.settings.dbPrefix}-WorkflowInstances

# DynamoDB table name for WfAssignments
dbWfAssignments: ${self:custom.settings.dbPrefix}-WfAssignments

# DynamoDB table name for Studies
dbStudies: ${self:custom.settings.dbPrefix}-Studies

# DynamoDB table global secondary index name for the "category" field
dbStudiesCategoryIndex: CategoryIndex

# DynamoDB table global secondary index name for the "accountId" field
dbStudiesAccountIdIndex: AccountIdIndex

# DynamoDB table name for Environments
dbEnvironments: ${self:custom.settings.dbPrefix}-Environments

# DynamoDB table name for Environments created using AWS Service Catalog
dbEnvironmentsSc: ${self:custom.settings.dbPrefix}-EnvironmentsSc

# DynamoDB table name for Environment Types
dbEnvironmentTypes: ${self:custom.settings.dbPrefix}-EnvironmentTypes

# DynamoDB table name for UserRoles
dbUserRoles: ${self:custom.settings.dbPrefix}-UserRoles

# DynamoDB table name for AwsAccounts
dbAwsAccounts: ${self:custom.settings.dbPrefix}-AwsAccounts

# DynamoDB table name for Indexes
dbIndexes: ${self:custom.settings.dbPrefix}-Indexes

# DynamoDB table name for CostApiCaches
dbCostApiCaches: ${self:custom.settings.dbPrefix}-CostApiCaches

# DynamoDB table name for Accounts
dbAccounts: ${self:custom.settings.dbPrefix}-Accounts

# DynamoDB table name for Projects
dbProjects: ${self:custom.settings.dbPrefix}-Projects

# DynamoDB table name for EnvironmentTokens
dbEnvironmentTokens: ${self:custom.settings.dbPrefix}-EnvironmentTokens

# DynamoDB table name for StudyPermissions
dbStudyPermissions: ${self:custom.settings.dbPrefix}-StudyPermissions

# DynamoDB table name for KeyPairs
dbKeyPairs: ${self:custom.settings.dbPrefix}-KeyPairs

# ================================ DB Settings - Depreciated ===========================================

# DynamoDB table name for the deployment store
dbTableDeploymentStore: ${self:custom.settings.dbPrefix}-DbDeploymentStore

# DynamoDB table name for supported authentication provider types
dbTableAuthenticationProviderTypes: ${self:custom.settings.dbPrefix}-DbAuthenticationProviderTypes

# DynamoDB table name for authentication provider configurations
dbTableAuthenticationProviderConfigs: ${self:custom.settings.dbPrefix}-DbAuthenticationProviderConfigs

# DynamoDB table name for data lake users
dbTableUsers: ${self:custom.settings.dbPrefix}-DbUsers

# DynamoDB table name for passwords for the internal data lake users
# (applicable only to the users authenticated by internal authentication provider)
dbTablePasswords: ${self:custom.settings.dbPrefix}-DbPasswords

# DynamoDB table name for User's API Keys. These keys are different from the user's passwords.
# These keys allow the user invoke Data Lake APIs directly outside of the UI.
dbTableUserApiKeys: ${self:custom.settings.dbPrefix}-DbUserApiKeys

# DynamoDB table name for Token Revocation Table
dbTableRevokedTokens: ${self:custom.settings.dbPrefix}-DbRevokedTokens

# DynamoDB table name for Locks
dbTableLocks: ${self:custom.settings.dbPrefix}-DbLocks

# DynamoDB table name for Step Templates
dbTableStepTemplates: ${self:custom.settings.dbPrefix}-DbStepTemplates

# DynamoDB table name for Workflow Templates
dbTableWorkflowTemplates: ${self:custom.settings.dbPrefix}-DbWorkflowTemplates

# DynamoDB table name for Workflow Templates Drafts
dbTableWorkflowTemplateDrafts: ${self:custom.settings.dbPrefix}-DbWorkflowTemplateDrafts

# DynamoDB table name for Workflows
dbTableWorkflows: ${self:custom.settings.dbPrefix}-DbWorkflows

# DynamoDB table name for Workflow Drafts
dbTableWorkflowDrafts: ${self:custom.settings.dbPrefix}-DbWorkflowDrafts

# DynamoDB table name for Workflow Instances
dbTableWorkflowInstances: ${self:custom.settings.dbPrefix}-DbWorkflowInstances

# DynamoDB table name for WfAssignments
dbTableWfAssignments: ${self:custom.settings.dbPrefix}-DbWfAssignments

# DynamoDB table name for Studies
dbTableStudies: ${self:custom.settings.dbPrefix}-DbStudies

# DynamoDB table name for Environments
dbTableEnvironments: ${self:custom.settings.dbPrefix}-DbEnvironments

# DynamoDB table name for Environments created using AWS Service Catalog
dbTableEnvironmentsSc: ${self:custom.settings.dbPrefix}-DbEnvironmentsSc

# DynamoDB table name for Environment Types
dbTableEnvironmentTypes: ${self:custom.settings.dbPrefix}-DbEnvironmentTypes

# DynamoDB table name for UserRoles
dbTableUserRoles: ${self:custom.settings.dbPrefix}-DbUserRoles

# DynamoDB table name for AwsAccounts
dbTableAwsAccounts: ${self:custom.settings.dbPrefix}-DbAwsAccounts

# DynamoDB table name for Indexes
dbTableIndexes: ${self:custom.settings.dbPrefix}-DbIndexes

# DynamoDB table name for CostApiCaches
dbTableCostApiCaches: ${self:custom.settings.dbPrefix}-DbCostApiCaches

# DynamoDB table name for Accounts
dbTableAccounts: ${self:custom.settings.dbPrefix}-DbAccounts

# DynamoDB table name for Projects
dbTableProjects: ${self:custom.settings.dbPrefix}-DbProjects

# DynamoDB table name for EnvironmentTokens
dbTableEnvironmentTokens: ${self:custom.settings.dbPrefix}-DbEnvironmentTokens

# DynamoDB table name for StudyPermissions
dbTableStudyPermissions: ${self:custom.settings.dbPrefix}-DbStudyPermissions

# DynamoDB table name for KeyPairs
dbTableKeyPairs: ${self:custom.settings.dbPrefix}-DbKeyPairs

# ================================ Env Settings ===========================================

envMgmtRoleArn: ${cf:${self:custom.settings.backendStackName}.EnvMgmtRoleArn}
