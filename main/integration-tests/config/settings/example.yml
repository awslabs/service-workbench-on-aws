# Set this to true, if this configuration file is for the CI/CD pipeline build server, otherwise leave it false
isBuildServer: false

# The AWS region where the service workbench application is deployed
awsRegion: us-east-1

# AWS profile to use for deployment. You must provide this value if isBuildServer = false
awsProfile:

# Make sure that the solutionName matches the one you are using in /main/config/settings
solutionName:

# Required. Usually, this is the same as the stage name that you used when you deployed the service
# workbench application
envName:

# Make sure that the envType matches the one you are using in /main/config/settings
# Make sure that you are not trying to run integration tests against your production environment
envType: dev

# Store the Test Administrator password in AWS Parameter Store. Pick a parameter name of your choice.
# For the parameter type, choose 'String' and for the data type choose 'text'.

# Provide the Test Administrator username and the location of the password in the parameter store
# Please make sure this user has admin privileges
username: ""
passwordPath: # This is the parameter name/path where you stored the password. Example: alan/int-test-user/password

# This is a Project ID in your SWB deployment. Please ensure it is safe to be used by integration tests
projectId: ""

# Currently only "internal" auth provider is supported for test admin credentials.
authenticationProviderId: "internal"

# Set this to true if debugging locally
isLocal: false

# Set this to the API endpoint if different than the following
localApiEndpoint: http://localhost:4000

# For integration testing, the default service catalog product should not create EC2 instances to prevent the
# possibility of creating dozens or even hundreds of EC2 instances that may not be terminated due to an
# accidental resource leak. The default service catalog product is based on a Cloudformation template located in:
#
# main/integration-tests/support/service-catalog/default-integration-test-product.yml
#
# This template only creates an entry in the Secrets Manager, and therefore, there won't be a drastic impact
# if dozens or hundreds of instances of the product don't get terminated.
#
# To use this product, do the following:
#
# 1. Go to the Service Catalog AWS console.
# 2. Go to Portfolios.
# 3. Go to the portfolio of Service Workbench.
# 4. Click the "Upload new product" button and create a product for the Cloudformation template specified above
#    using "Integration Test" as the name of the product.
# 5. Once the product is created, go to the Constraints tab.
# 6. Click the "Create constraint" button.
# 7. Specify the new product in the product dropdown list, check the "Launch constraint" radio button, and then
#    specify as a role name <stage>-<region>-sw-LaunchConstraint (For example, mystage-va-LaunchConstraint)
#
# Next, import the product as a workspace type in the Service Workbench UI, and grab the product and provisioning
# artifact IDs from the UI card of the workspace type. The concatenation of the product id and provisioning artifact
# ID are shown below the name of the workspace type in the card. For example, prod-qmeib2re62zba-pa-mpsdtdd45vzqe.
# In this example, prod-qmeib2re62zba is the product ID and pa-mpsdtdd45vzqe is the provisioning artifact ID. Set the
# product and provisioning artifact IDs you obtained below:
defaultProductId: ""
defaultProvisioningArtifactId: ""
