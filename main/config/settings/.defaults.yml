version: 1.0.0

regionShortNamesMap:
  "us-east-2": "oh"
  "us-east-1": "va"
  "us-west-1": "ca"
  "us-west-2": "or"
  "ap-east-1": "hk"
  "ap-south-1": "mum"
  "ap-northeast-3": "osa"
  "ap-northeast-2": "sel"
  "ap-southeast-1": "sg"
  "ap-southeast-2": "syd"
  "ap-northeast-1": "ty"
  "ca-central-1": "ca"
  "cn-north-1": "cn"
  "cn-northwest-1": "nx"
  "eu-central-1": "fr"
  "eu-west-1": "irl"
  "eu-west-2": "ldn"
  "eu-west-3": "par"
  "eu-north-1": "sth"
  "me-south-1": "bhr"
  "sa-east-1": "sao"
  "us-gov-east-1": "gce"
  "us-gov-west-1": "gcw"

# The default region to deploy to
awsRegion: us-east-1

# Short region name
# This is used in the namespace to avoid naming collisions to allow deploying the same solution across multiple regions
# Currently using the ISO country code or state code or city abbreviation as short name of the region
# See "regionShortNamesMap" defined above.
# The above mapping needs to be updated when deploying to any region other than the ones listed above in future
awsRegionShortName: ${self:custom.settings.regionShortNamesMap.${self:custom.settings.awsRegion}}

# This prefix is used for naming various resources
namespace: ${self:custom.settings.envName}-${self:custom.settings.awsRegionShortName}-${self:custom.settings.solutionName}

# This is the namespace for naming resources that have global namespace such as S3 bucket names
globalNamespace: ${self:custom.settings.awsAccountInfo.awsAccountId}-${self:custom.settings.namespace}

# Name of the deployment bucket. The serverless framework uploads various artifacts to this bucket.
# These artifacts include things like Lambda function code ZIP files, AWS CloudFormation Templates etc
deploymentBucketName: ${self:custom.settings.globalNamespace}-artifacts

# Bucket policy for the deployment bucket.
deploymentBucketPolicy:
  {
    "Version": "2008-10-17",
    "Statement":
      [
        {
          "Sid": "Deny requests that do not use TLS",
          "Effect": "Deny",
          "Principal": "*",
          "Action": "s3:*",
          "Resource": "arn:aws:s3:::${self:custom.settings.deploymentBucketName}/*",
          "Condition": { "Bool": { "aws:SecureTransport": "false" } },
        },
        {
          "Sid": "Deny requests that do not use SigV4",
          "Effect": "Deny",
          "Principal": "*",
          "Action": "s3:*",
          "Resource": "arn:aws:s3:::${self:custom.settings.deploymentBucketName}/*",
          "Condition":
            {
              "StringNotEquals": { "s3:signatureversion": "AWS4-HMAC-SHA256" },
            },
        },
      ],
  }

# The S3 bucket name used to host environment bootstrap scripts
environmentsBootstrapBucketName: ${self:custom.settings.globalNamespace}-environments-bootstrap-scripts

# The short solution name is used to namespace a few AWS resources
# Try to keep this setting short to avoid hitting long strings issues
solutionName: galileo

# The environment name where you want to deploy the solution to. (e.g. developer1, developer2, demo, prod etc.)
# This is also used for creating a namespace for resources. Usually, this is same as serverless "stage".
# All resource names reference "envName" instead of directly using "opt:stage".
# This indirection allows for easy incorporation of extra variables in the "envName", if required.
# For example, if the same solution needs to be deployed across multiple AWS accounts we can easily
# add account specific variable in "envName" for keeping the namespace specific to each account.
envName: ${opt:stage}

# The environment type (e.g. dev, demo, prod). This is for grouping multiple environments
# into types. For example, all developers' environments can be of type "dev". This can be
# used for enabling conditionals in code that might need to be different between dev and
# production builds (for example, enabling CORS for localhost for local development).
envType: prod

# This prefix is used to construct the full name of a table
dbTablePrefix: ${self:custom.settings.namespace}

# Root path in parameter store for parameters used by this solution.
paramStoreRoot: "${self:custom.settings.envName}/${self:custom.settings.solutionName}"

# Information about the root admin user.
# The root admin user is created by default in the internal authentication provider
# The root user can be used for provisioning additional authentication providers
# Root user's username
rootUserName: root
# Root user's first name
rootUserFirstName: root
# Root user's last name
rootUserLastName: root
# Root user's email address
rootUserEmail: root@example.com

# Enable/disable external researchers feature
# When enableExternalResearchers = true, it allows users to be assigned to an "External Researcher" role.
# These users can launch analytics workspaces in external AWS accounts.
# When enableExternalResearchers = false (default setting), it does NOT allow any user to be assigned with
# "External Researcher" role (any existing users who have "External Researcher" role will no longer be able to login).
enableExternalResearchers: false

# THIS SETTING IS ONLY APPLICABLE FOR LOCAL DEVELOPMENT
# A flag indicating if lambda function role's trust policy (assume role policy) should be automatically adjusted to
# allow assuming the role from local machine (applicable only for local development)
localRoleAutoAdjustTrust: false

# Optional custom domain name; if empty, use the CloudFront domain name
domainName: ''
